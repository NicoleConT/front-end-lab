(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{393:function(t,s,a){"use strict";a.r(s);var e=a(27),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%97%A5%E5%B8%B8%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B"}},[t._v("日常提交流程")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#add"}},[t._v("Add")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#commit"}},[t._v("Commit")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%92%A4%E9%94%80%E8%BF%98%E6%B2%A1-push-%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%9A%84-commit"}},[t._v("撤销还没 push 到远程的 commit")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%92%A4%E9%94%80%E5%B7%B2%E7%BB%8F-push-%E5%88%B0%E8%BF%9C%E7%AB%AF%E7%9A%84-commit"}},[t._v("撤销已经 push 到远端的 commit")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#branch-and-tag"}},[t._v("branch and tag")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#history"}},[t._v("history")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#remote"}},[t._v("remote")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E4%BB%93%E5%BA%93%E7%9A%84-commit"}},[t._v("合并两个不同仓库的 commit")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#guide"}},[t._v("Guide")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%A7%A3%E5%86%B3git%E7%9B%AE%E5%BD%95%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98"}},[t._v("解决.git目录过大的问题")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93"}},[t._v("初始化远程仓库")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%B8%85%E7%A9%BA%E9%A1%B9%E7%9B%AE%E7%9A%84-commit-%E8%AE%B0%E5%BD%95"}},[t._v("清空项目的 commit 记录")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9"}},[t._v("撤销修改")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E5%88%87%E6%8D%A2"}},[t._v("文件夹大小写切换")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BF%9D%E7%95%99%E7%A9%BA%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9"}},[t._v("保留空的文件夹")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF"}},[t._v("常见错误")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%B6%E4%BB%96"}},[t._v("其他")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E4%BB%93%E5%BA%93%E6%8F%90%E4%BA%A4%E8%80%85%E7%9A%84%E7%BB%9F%E8%AE%A1"}},[t._v("查看仓库提交者的统计")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9B%B4%E6%94%B9%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF"}},[t._v("更改项目中作者信息")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4"}},[t._v("vim 常用命令")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB"}},[t._v("扩展阅读")])])])])]),t._v(" "),a("details",[a("summary",[t._v("常见术语解释")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("术语")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("origin")]),t._v(" "),a("td",[t._v("默认远端仓库")])]),t._v(" "),a("tr",[a("td",[t._v("master")]),t._v(" "),a("td",[t._v("默认开发分支")])]),t._v(" "),a("tr",[a("td",[t._v("HEAD")]),t._v(" "),a("td",[t._v("默认开发分支")])]),t._v(" "),a("tr",[a("td",[t._v("HEAD^")]),t._v(" "),a("td",[a("code",[t._v("HEAD")]),t._v(" 父提交")])]),t._v(" "),a("tr",[a("td",[t._v("tracked")]),t._v(" "),a("td",[a("code",[t._v("git")]),t._v(" 已经追踪文件的修改")])]),t._v(" "),a("tr",[a("td",[t._v("untracked")]),t._v(" "),a("td",[t._v("未跟踪的状态，也就是 "),a("code",[t._v("git")]),t._v(" 不认识的新的文件")])]),t._v(" "),a("tr",[a("td",[t._v("revert")]),t._v(" "),a("td",[t._v("回退")])])])])]),t._v(" "),a("h2",{attrs:{id:"日常提交流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日常提交流程"}},[t._v("#")]),t._v(" 日常提交流程")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跟踪改动过的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `git add <file>` or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `git add -A` or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加 commit 信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不同团队有不同的编写 commit 信息规范，有的项目依赖 commit 的格式来做自动化处理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 常见格式如： `<action> <desc content>`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fix: message commit"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从远程仓库拉取代码，查看是否有冲突")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接 git pull 可能会有冲突，可采用 rebase 代替默认的 merge 策略减少多余的 commit 提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交改动至默认的远程仓库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or 同时提交改动至指定远程仓库(orgin)和分支(develop, master)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master develop\n")])])]),a("h2",{attrs:{id:"add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" Add")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("git add "),a("code",[t._v("<change file>")])]),t._v(" "),a("td",[t._v("git add "),a("code",[t._v("<change file>")]),t._v("将其添加到 status")])]),t._v(" "),a("tr",[a("td",[t._v("git add "),a("code",[t._v("[--all / .]")])]),t._v(" "),a("td",[t._v("添加全部改动的文件")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" Commit")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v('git commit -m "'),a("code",[t._v("<message>")]),t._v('"')]),t._v(" "),a("td",[t._v("为已经进入"),a("code",[t._v("stage(暂存的更改)")]),t._v("添加"),a("code",[t._v("commit")]),t._v("信息")])]),t._v(" "),a("tr",[a("td",[t._v("git commit --amend")]),t._v(" "),a("td",[t._v("修改上一次提交的"),a("code",[t._v("commit")]),t._v("信息")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"撤销还没-push-到远程的-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销还没-push-到远程的-commit"}},[t._v("#")]),t._v(" 撤销还没 push 到远程的 commit")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到需要撤销的 commit 的`前一个` commit_hash(这步可以理解为找到定位的节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bash 的 commit 顺序是从上(最新 commit)至下的顺序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --online\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销 commit, 将代码恢复为前一个版本(会丢失修改的代码)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard commit_hash\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or 完成 commit 撤销，可以重新提交 commit(不会丢失修改的代码)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset commit_hash\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果只 commit 了一次，想给回退到 commit 前上一个版本的话，还可以用`HEAD`代替`hash`(不会丢失修改的代码)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEAD    就是本次的版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEAD~1  就是上一次的版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD~1\n")])])]),a("h3",{attrs:{id:"撤销已经-push-到远端的-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销已经-push-到远端的-commit"}},[t._v("#")]),t._v(" 撤销已经 push 到远端的 commit")]),t._v(" "),a("p",[t._v("在使用"),a("code",[t._v("git")]),t._v("时，有时候我们会无意间错推了我们不想推上去的文件或者希望能够回退以前版本的时候.\n这时我们可以先在本地回退到相应的版本。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意使用 --hard 参数会抛弃当前工作区的修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("版本号"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数"),a("code",[t._v("--force")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# branch: 分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --force\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"branch-and-tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branch-and-tag"}},[t._v("#")]),t._v(" branch and tag")]),t._v(" "),a("p",[t._v("常用的分支和标签命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git checkout <branch/tag> 切换指定的分支或标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换名为 gh-pages 的分支, 如果不存在这个分支就创建它")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gh-pages"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使当前的分支和远程仓库 `origin2/game` 建立关联（前提是目标分支要存在）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立关联后就可以直接使用 `git push` 命令而无需添加其他参数。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to orgin2/game\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于当前 commit 创建标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除指定标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h2",{attrs:{id:"history"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交历史")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用更简洁的模式查看提交历史")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定文件的提交历史")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以列表的方式查看指定文件的提交历史")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remote"}},[t._v("#")]),t._v(" remote")]),t._v(" "),a("p",[t._v("添加新的 remote")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("originName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remoteUrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example, 添加一个 origin name 为 `newOrigin`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" newOrigin https://github.com/anran758/front-end-lab.git\n")])])]),a("p",[t._v("将本地分支推送到存在依赖关系的远端分支，如果 remote 没有推送的分支，那就新建一个:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),a("p",[t._v("推送当前分支并与 remote 上游建立跟踪")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin master\n")])])]),a("p",[t._v("设置上游并推送至远程的 "),a("code",[t._v("master")]),t._v(" 分支")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以下两条与上面一条功能相似")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to orgin/master\n")])])]),a("h3",{attrs:{id:"合并两个不同仓库的-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并两个不同仓库的-commit"}},[t._v("#")]),t._v(" 合并两个不同仓库的 commit")]),t._v(" "),a("p",[t._v("首先我们有两个仓库: "),a("code",[t._v("repo1")]),t._v(" 和 "),a("code",[t._v("repo2")]),t._v("。"),a("code",[t._v("repo1")]),t._v(" 是我们想要保留的仓库：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加远程地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" repo2 git@github.com:anran758/repo2.git\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch repo2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换至 master 分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并 repo2 的 master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于两个 master 分支的 commit 会有所不同，此时需要添加：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --allow-unrelated-histories, 允许 git 合并不相关的历史，其余有冲突让我们手动确认")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge repo2/master --allow-unrelated-histories\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并冲突、后提交 commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chg: 合并两个仓库的历史"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),a("h2",{attrs:{id:"guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guide"}},[t._v("#")]),t._v(" Guide")]),t._v(" "),a("h3",{attrs:{id:"解决-git目录过大的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决-git目录过大的问题"}},[t._v("#")]),t._v(" 解决.git目录过大的问题")]),t._v(" "),a("details",[a("summary",[t._v("Click show details")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/29769130/answer/315745139",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何解决 GitHub 提交次数过多 .git 文件过大的问题？ - 作者：郑宇"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("项目中上传了一些很大的文件(文件过大在"),a("code",[t._v("git cached")]),t._v("中占用了很大空间，可能是几百M)，经过了一段时间后又将这些文件移除，并且确定不在使用后，可以使用下面命令在树中移除它:")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("运行 gc ，生成 pack 文件（后面的 --prune=now 表示对之前的所有提交做修剪，有的时候仅仅 gc 一下.git 文件就会小很多）")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc --prune"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now\n")])])])]),t._v(" "),a("li",[a("p",[t._v("找出最大的三个文件（看自己需要）")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" verify-pack -v .git/objects/pack/*.idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" -k "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" -3\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例输出：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1debc758cf31a649c2fc5b0c59ea1b7f01416636 blob   4925660 3655422 14351")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#c43a8da9476f97e84b52e0b34034f8c2d93b4d90 blob   154188651 152549294 12546842")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#2272096493d061489349e0a312df00dcd0ec19a2 blob   155414465 153754005 1650961363")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("查看那些大文件究竟是谁（c43a8da 是上面大文件的hash码）")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-list --objects --all "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" c43a8da\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# c43a8da9476f97e84b52e0b34034f8c2d93b4d90 data/bigfile")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("code",[t._v("git filter-branch")]),t._v("移除对文件的引用重写分支。因为我想删除的是一个目录("),a("code",[t._v("Books")]),t._v(")，因此需要加上递归("),a("code",[t._v("-r")]),t._v(")来移除"),a("code",[t._v("Book")]),t._v("文件夹下的文件.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --index-filter  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git rm -r --cached --ignore-unmatch Books'")]),t._v(" --prune-empty --tag-name-filter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" --force -- --all\n")])])])]),t._v(" "),a("li",[a("p",[t._v("进行 "),a("code",[t._v("repack")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" for-each-ref --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'delete %(refname)'")]),t._v(" refs/original "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-ref --stdin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog expire --expire"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now --all\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc --prune"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now\n")])])])]),t._v(" "),a("li",[a("p",[t._v("查看 pack 的空间使用情况")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" count-objects -v\n")])])])])])]),t._v(" "),a("h3",{attrs:{id:"初始化远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化远程仓库"}},[t._v("#")]),t._v(" 初始化远程仓库")]),t._v(" "),a("p",[t._v("假设你已经在远程储存库上创建了新的库("),a("code",[t._v("test")]),t._v(")，此时需要将本地项目的代码关联并推送到远程仓库上去:")]),t._v(" "),a("details",[a("summary",[t._v("Click show details")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化 git")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加全部改动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加 commit 信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"init message"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加远程地址，提交代码至远程，并设置为追踪分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@github.com:anran758/test.git\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])])])]),t._v(" "),a("h3",{attrs:{id:"清空项目的-commit-记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清空项目的-commit-记录"}},[t._v("#")]),t._v(" 清空项目的 commit 记录")]),t._v(" "),a("p",[t._v("当一个项目已经存在久远，或者说"),a("code",[t._v("commit")]),t._v("记录有很多历史遗留的问题，分支线跟地铁图似得。此时你想重置 "),a("code",[t._v("git")]),t._v(" 线时，可以这样做:")]),t._v(" "),a("details",[a("summary",[t._v("Click show code")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先从远端克隆一份仓库，不要在原先本地项目直接进行操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@github.com:anran758/test.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个临时分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --orphan tmp\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在新的分支中添加全部文件进去，并提交 commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit message"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时所处于的分支在 tmp 分支， 将 tmp 更名为 master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制推入远程仓库即可")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f origin master\n")])])])]),t._v(" "),a("h3",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只删除所有`untracked`的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果文件已经被`tracked`, 修改过的文件不会被回退")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -df\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把`tracked`的文件回退到前一个版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于`untracked`的文件(比如编译的临时文件)都不会被删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销指定未提交的修改内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout HEAD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h3",{attrs:{id:"文件夹大小写切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件夹大小写切换"}},[t._v("#")]),t._v(" 文件夹大小写切换")]),t._v(" "),a("details",[a("summary",[t._v("Click show details")]),t._v(" "),a("p",[t._v("如果你提交了一个文件夹名为"),a("code",[t._v("FOO")]),t._v("，然后你现在想修改为小写的"),a("code",[t._v("foo")]),t._v("时，你会发现直接修改文件名"),a("code",[t._v("git")]),t._v("是不识别的。因为在默认情况下，"),a("code",[t._v("git")]),t._v("是不区分文件名大小写。")]),t._v(" "),a("p",[t._v("这时有两个解决方法：")]),t._v(" "),a("p",[a("strong",[t._v("(不推荐)")]),t._v(" 直接设置 "),a("code",[t._v("git config")]),t._v(" 区分大小写，但弊端在不同平台下可能会引起别的问题。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置仓库的大小写敏感")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config core.ignorecase "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("p",[a("strong",[t._v("(推荐)")]),t._v(" 通过 "),a("code",[t._v("git mv")]),t._v(" 方法来改名。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回避系统对大小写的判定，先修改为其他的名字, git 会将修改自动添加到工作区上")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" FOO FOO1\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再将名字修改回小写的状态，修改后的操作会自动添加到工作区上, 这样就完成了名字的修改")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" FOO1 foo\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交修改")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Modify dir name"')]),t._v("\n")])])])]),t._v(" "),a("h3",{attrs:{id:"保留空的文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保留空的文件夹"}},[t._v("#")]),t._v(" 保留空的文件夹")]),t._v(" "),a("details",[a("summary",[t._v("Click show details")]),t._v(" "),a("p",[t._v("在默认情况下，"),a("code",[t._v("git")]),t._v(" 会忽略掉空的文件夹。如果想要保留这个文件夹的话，可以在里面创建一个名为"),a("code",[t._v(".gitkeep")]),t._v("的空文件(名字是社区约定形成，也可以使用其他名字，原理上只是占个坑).")]),t._v(" "),a("p",[t._v("不过"),a("code",[t._v("windows")]),t._v("平台下不能直接右键创建"),a("code",[t._v(".")]),t._v("开头的文件，系统会认为文件名不合法。这时需要使用命令行或者编辑器来完成创建。")])]),t._v(" "),a("h2",{attrs:{id:"常见错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见错误"}},[t._v("#")]),t._v(" 常见错误")]),t._v(" "),a("details",[a("summary",[t._v("在执行 git pull origin master 命令时，无法 pull 的情况")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n$ fatal: refusing to merge unrelated histories\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原因是说在 git 2.9版本后，需要加上这句 --allow-unrelated-histories。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master --allow-unrelated-histories\n")])])]),a("hr"),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("git pull")]),t._v("遇到合并"),a("code",[t._v("commit")]),t._v("时，此时并不想因为合并代码多产生一条"),a("code",[t._v("commit")]),t._v("记录，可以将"),a("code",[t._v("commit")]),t._v("信息注释掉，"),a("code",[t._v("shift + :wq")]),t._v("退出。")]),t._v(" "),a("p",[t._v("然后会因为自动合并失败后提示错误:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Auto-merging pages/index/index.js\nerror: Empty commit message.\nNot committing merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git commit'")]),t._v(" to complete the merge.\n")])])]),a("p",[t._v("撤消合并并再次拉动，使用"),a("code",[t._v("rebase")]),t._v("解决冲突：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --abort\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase\nFirst, rewinding "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" to replay your work on "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" of it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nApplying: fix: fixed something\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])])]),t._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h3",{attrs:{id:"查看仓库提交者的统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看仓库提交者的统计"}},[t._v("#")]),t._v(" 查看仓库提交者的统计")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看选项")]),t._v("\ngit shortlog --help\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 统计排除合并提交")]),t._v("\ngit shortlog -sn --no-merges\n")])])]),a("h3",{attrs:{id:"更改项目中作者信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更改项目中作者信息"}},[t._v("#")]),t._v(" 更改项目中作者信息")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://help.github.com/en/articles/changing-author-info",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 更改作者信息"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("同样的方法还可以修改 commit 时间为作者时间:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --env-filter "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GIT_COMMITTER_DATE="),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GIT_AUTHOR_DATE")]),t._v("; export GIT_COMMITTER_DATE'")]),t._v("\n")])])]),a("h3",{attrs:{id:"vim-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vim-常用命令"}},[t._v("#")]),t._v(" vim 常用命令")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/operations/#vim"}},[t._v("vim 常用命令")])],1)]),t._v(" "),a("h3",{attrs:{id:"扩展阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读"}},[t._v("#")]),t._v(" 扩展阅读")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.blog/2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);